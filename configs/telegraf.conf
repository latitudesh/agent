# Telegraf Configuration for Latitude.sh Agent
# This configuration collects system metrics and sends them to the Latitude.sh API

# Global Agent Configuration
[agent]
  # Interval at which to gather metrics (matches agent interval)
  interval = "30s"
  
  # Collection jitter for spreading collection across the interval
  collection_jitter = "2s"
  
  # Default data precision
  precision = "s"
  
  # Log level (debug, info, warn, error)
  debug = false
  quiet = false
  
  # Hostname override (leave empty to use system hostname)
  hostname = ""
  
  # If set to true, do no set the "host" tag in the telegraf agent
  omit_hostname = false

# Global tags applied to all metrics for server identification
[global_tags]
  project_id = "${PROJECT_ID}"
  firewall_id = "${FIREWALL_ID}"
  public_ip = "${PUBLIC_IP}"
  agent_version = "${AGENT_VERSION}"
  environment = "production"

###############################################################################
#                            OUTPUT PLUGINS                                  #
###############################################################################

# Send metrics to Latitude.sh API endpoint
[[outputs.http]]
  # API endpoint URL (will be configured via environment variables)
  url = "${LATITUDESH_METRICS_ENDPOINT}"
  
  # HTTP method
  method = "POST"
  
  # HTTP timeout
  timeout = "10s"
  
  # HTTP headers - use proper TOML syntax
  headers = {"Content-Type" = "application/json", "Authorization" = "Bearer ${LATITUDESH_BEARER}", "X-Agent-Version" = "${AGENT_VERSION}", "X-Project-ID" = "${PROJECT_ID}", "X-Firewall-ID" = "${FIREWALL_ID}"}
  
  # Data format (json, influx, etc.)
  data_format = "json"
  
  # JSON timestamp format
  json_timestamp_format = "unix_ms"

###############################################################################
#                            INPUT PLUGINS                                   #
###############################################################################

# Read CPU metrics
[[inputs.cpu]]
  # Whether to report per-cpu stats or not
  percpu = true
  
  # Whether to report total system cpu stats or not
  totalcpu = true
  
  # If true, collect raw CPU time metrics
  collect_cpu_time = false
  
  # If true, compute and report the sum of all non-idle CPU states
  report_active = false

# Read memory metrics
[[inputs.mem]]
  # No additional configuration needed

# Read disk usage metrics
[[inputs.disk]]
  # Mountpoints to ignore
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]
  
  # Mountpoint patterns to ignore
  ignore_mount_points = ["/tmp*", "/var/tmp*", "/boot*"]

# Read disk I/O metrics
[[inputs.diskio]]
  # Devices to collect stats for (empty means all)
  devices = []
  
  # Skip serial number and WWN collection
  skip_serial_number = true

# Read network interface metrics
[[inputs.net]]
  # Interfaces to collect stats for (empty means all)
  interfaces = []
  
  # Ignore virtual interfaces
  ignore_protocol_stats = false

# Read network statistics
[[inputs.netstat]]
  # No additional configuration needed

# Read system load metrics
[[inputs.system]]
  # Fields to collect
  fielddrop = ["uptime_format"]

# Read process metrics
[[inputs.processes]]
  # No additional configuration needed

# Read kernel metrics
[[inputs.kernel]]
  # No additional configuration needed

# Read system temperature metrics (if available)
[[inputs.temp]]
  # No additional configuration needed

# Read docker container metrics (if docker is available)
[[inputs.docker]]
  # Docker endpoint
  endpoint = "unix:///var/run/docker.sock"
  
  # Gather services metrics for container
  gather_services = false
  
  # Only collect container stats for running containers
  container_state_include = ["running"]
  
  # Timeout for docker list, info, and stats commands
  timeout = "5s"
  
  # Skip containers with these names
  container_name_exclude = []
  
  # Skip containers with these images
  container_image_exclude = []
  
  # Whether to report for each container total blkio and network stats
  total = false

###############################################################################
#                            PROCESSOR PLUGINS                               #
###############################################################################

# No processors needed - using global_tags for identification

###############################################################################
#                            AGGREGATOR PLUGINS                              #
###############################################################################

# No aggregators configured - send raw metrics

###############################################################################
#                            SERVICE INPUT PLUGINS                           #
###############################################################################

# Monitor the Latitude.sh agent process itself
[[inputs.procstat]]
  pattern = "lsh-agent"
  pid_finder = "pgrep"
  
  # Fields to collect
  pid_tag = true
  process_name = "lsh-agent"